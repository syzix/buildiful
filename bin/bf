#!/bin/bash
#!/bin/bash -x

# Copyright (C) 2012 Kevin Pulo.
#
# This file is part of Buildiful.
# 
# Buildiful is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Buildiful is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Buildiful.  If not, see <http://www.gnu.org/licenses/>.


shopt -s nullglob extglob globstar 


# Better off in a config file somewhere.... /etc/bfrc??
#umask 002
umask 022


cmdname="${0##*/}"


function info {
	echo "$cmdname${subcmd:+ $subcmd${pkgname:+ $pkgname${extrainfo}}}: $*"
}

function error {
	local rc="$1"
	shift
	info "Error: $(date): $1"
	shift
	local i
	for i; do
		info "$1"
	done
	echo ""
	exit "$rc"
}

function warning {
	info "Warning: $*"
}

function fail {
	local rc="$?"
	#set
	error "$rc" "Exit status $rc in function ${FUNCNAME[1]}() at ${BASH_SOURCE[1]}: line ${BASH_LINENO[0]}: $(awk -v line="${BASH_LINENO[0]}" 'NR==line' "${BASH_SOURCE[1]}")"
}


function log_both {
	local logfile="$1"
	shift
	if [ x"$logfile" = x"" ]; then
		"$@"
	else
		local rc ofd efd
		{
			{
				"$@" | tee -a "$logfile" 1>&"$ofd"
				return ${PIPESTATUS[0]}
			} 2>&1 | tee -a "$logfile" 1>&"$efd"
			rc=${PIPESTATUS[0]}
		} {ofd}>&1 {efd}>&2
		exec {ofd}>&- {efd}>&-
		return $rc
	fi
}



function _default_repo {
	default_repo="$detect_repo"
}

function default_repo {
	_default_repo
}

#function _default_prefix {
#	default_prefix=""
#}
#
#function default_prefix {
#	_default_prefix
#}

function _default_version {
	default_stable_version
	default_version="$default_stable_version"
}

function default_version {
	_default_version
}

function _default_stable_version {
	default_stable_version=""
}

function default_stable_version {
	_default_stable_version
}

function _default_unstable_version {
	default_unstable_version=""
}

function default_unstable_version {
	_default_unstable_version
}

function _version_separator {
	version_separator="."
}

function version_separator {
	_version_separator
}

function _supported_version {
	#return 0
	source_checksum
	[ x"$source_checksum" != x"" ]
}

function supported_version {
	_supported_version
}

function _default_arch {
	local kernel="$(uname -s)"
	kernel="${kernel,,}"
	default_arch="${ARCH:-$(uname -m)-$kernel}"
	# I think I got this from SBo, but now I'm not so sure it's a good idea...
	#case "$default_arch" in
	#	i?86) default_arch=i486 ;;
	#	arm*) default_arch=arm ;;
	#esac
}

function default_arch {
	_default_arch
}

function _supported_arch {
	return 0
}

function supported_arch {
	_supported_arch
}

function _maxjobs {
	maxjobs=""
}

function maxjobs {
	_maxjobs
}

function _numjobs {
	# FIXME: numcpus
	numjobs="1"
}

function numjobs {
	_numjobs
}

# this is a helper function
function sourceforge_location {
	# FIXME: eventually, a system-wide config and/or envvar could be used to choose which mirror to use
	local project="${1:-$pkgname}"
	local subdir="${2:-$project}"
	local filename="${3:-$project-$version.tar.gz}"
	sourceforge_location="http://sourceforge.net/projects/$project/files/$subdir/$filename/download"
}


source_location=""
function _source_location {
	source_location=""
}

function source_location {
	_source_location
}

source_checksum=""
function _source_checksum {
	source_checksum=""
}

function source_checksum {
	_source_checksum
}

archive_name=""
function _archive_name {
	source_location
	case "$source_location" in
		http://sourceforge.net/*/download)
			#local n="${source_location%/download}"
			#echo "${n##*/}"
			archive_name="${source_location%/download}"
			archive_name="${archive_name##*/}"
			;;
		*)
			#echo "${source_location##*/}"
			archive_name="${source_location##*/}"
			;;
	esac
}

function archive_name {
	_archive_name
}

source_dir=""
function _source_dir {
	archive_name
	case "$archive_name" in
		*.tar) source_dir="${archive_name%.tar}" ;;
		*.tar.Z) source_dir="${archive_name%.tar.Z}" ;;
		*.tar.gz) source_dir="${archive_name%.tar.gz}" ;;
		*.tar.bz2) source_dir="${archive_name%.tar.bz2}" ;;
		*.tar.xz) source_dir="${archive_name%.tar.xz}" ;;
		*.tZ) source_dir="${archive_name%.tZ}" ;;
		*.tgz) source_dir="${archive_name%.tgz}" ;;
		*.tbz2) source_dir="${archive_name%.tbz2}" ;;
		*.txz) source_dir="${archive_name%.txz}" ;;
		*.zip) source_dir="${archive_name%.zip}" ;;
		*.rar) source_dir="${archive_name%.rar}" ;;
	esac
}

function source_dir {
	_source_dir
}

function _build_deps {
	build_deps+=()
}

function build_deps {
	_build_deps
}

function _runtime_deps {
	runtime_deps+=()
}

function runtime_deps {
	_runtime_deps
}

function _configure_args {
	basedir
	configure_args+=( --prefix="$basedir" --build="$arch-syzix-linux" )
}

function configure_args {
	_configure_args
}

function file_copy {
	echo cp -a "$1" .
	cp -a "$1" .
}

fetcher=()
function _fetcher {
	source_location
	case "$source_location" in
		http://*|ftp://*) fetcher=( wget -c -v ) ;;
		https://*) fetcher=( wget -c -v --no-check-certificate ) ;;
		rsync://*) fetcher=( rsync -aP ) ;;
		svn://) fetcher=( svn ) ;;
		git://) fetcher=( git clone ) ;;    # ???????
		/*)
			if [ -r "$source_location" ]; then
				fetcher=( file_copy )
			fi
			;;
	esac
}

function fetcher {
	_fetcher
}

function _fetch {
	# FIXME: ideally, first try to download the source and/or checksums from a syzix.org mirror
	# if that fails (eg. this is someone's personal bf, or a new bf package), then go for the
	# normal download from upstream.
	# this would probably be best declared, not assumed.
	# bf could be smart enough to know that anything from the syzix{,-*} repos can be assumed
	# to be on syzix.org without having to declare it (they should still have an upstream
	# source_location defined, for when new versions come out, etc).
	fetcher
	if [ "${#fetcher[@]}" -gt 0 ]; then
		source_location
		"${fetcher[@]}" "$source_location"
	fi
}

function fetch {
	_fetch
}

function standard_checksum_verifier {
	# $1 = checksum length
	# $2 = checksum
	# $3 = full path to file
	local prog
	case "$1" in
		128) prog="md5sum" ;;
		160) prog="sha1sum" ;;
		*) prog="sha${1}sum" ;;
	esac
	"$prog" -c --status <<< "$2  $3"
}

function repeat-string {
	# $1 = number of times to repeat
	# $2 = string
	local i
	local s
	for (( i = 0 ; i < $1 ; i++ )); do
		s+="$2"
	done
	echo -n "$s"
}

# prefer longer checksums
checksum_lengths=(512 384 256 224 160 128)
declare -a checksum_pattern
for i in "${checksum_lengths[@]}"; do
	checksum_pattern[$i]="$(repeat-string "$(($i/4))" '[0-9a-fA-F]')"
done

verifier=()
function _verifier {
	# FIXME: eventually make this figure out more types of checksums

	local i
	verifier=()
	source_checksum
	for i in "${checksum_lengths[@]}"; do
		case "$source_checksum" in
			${checksum_pattern[$i]})
				verifier=( standard_checksum_verifier "$i" )
				break
				;;
		esac
	done

	if [ "${#verifier[@]}" -eq 0 ]; then
		echo "Warning: unknown checksum style: $source_checksum"
		verifier=( true )
	fi
}

function verifier {
	_verifier
}

function _verify {
	verifier
	source_location
	if [ "${#verifier[@]}" -gt 0 ]; then
		source_checksum
		archive_name
		"${verifier[@]}" "$source_checksum" "$archive_dir/$archive_name"
	fi
}

function verify {
	_verify
}

unpacker=()
function _unpacker {
	archive_name
	case "$archive_name" in
		*.tar) unpacker=( tar xf ) ;;
		*.tar.Z) unpacker=( tar xf ) ;;
		*.tar.gz) unpacker=( tar xf ) ;;
		*.tar.bz2) unpacker=( tar xf ) ;;
		*.tar.xz) unpacker=( tar xf ) ;;
		*.tZ) unpacker=( tar xf ) ;;
		*.tgz) unpacker=( tar xf ) ;;
		*.tbz2) unpacker=( tar xf ) ;;
		*.txz) unpacker=( tar xf ) ;;
		*.zip) unpacker=( unzip ) ;;
		*.rar) unpacker=( unrar ) ;;
	esac
}

function unpacker {
	_unpacker "$@"
}

function _unpack {
	unpacker
	if [ "${#unpacker[@]}" -gt 0 ]; then
		archive_name
		"${unpacker[@]}" "$archive_dir/$archive_name"
	fi
}

function unpack {
	_unpack "$@"
}


# this is a helper function
function standard_autoconf_build {
	local i
	for i in . src; do
		if [ -r "$i"/Makefile.in -a ! -s "$i"/Makefile ]; then
			configure_args
			./configure "${configure_args[@]}" || fail
			break
		fi
	done
	# FIXME: use $numjobs and $maxjobs
	make || fail
	DESTDIR="$ROOT" make install || fail
	make clean || fail
}


# "asis_build", which just takes what was unpacked, and puts it in place "as-is".
# this is a helper function
function asis_build {
	cp -av . "/$ROOT/$basedir"
}


function null_build {
	# Useful for "packages" that only provide a modulefile,
	# ie. meta-packages for meta-modules, eg. the "essentials" module.
	:
}


function _build {
	# try to automatically build
	# eg. if configure.@(ac|in) found, then assume autoconf
	# elif Makefile, then a "plain" build (make && make install) - how to specify prefix in this case?
	# elif scons
	# elif cmake
	# elif perl module
	# elif python module
	# else null_build
	return 1
}

function build {
	_build
}


function _preserve_buildfiles {
	# also copy the source archive, and any other files from $bfdir (eg. patch files)
	cp -r "$bffile" "$bfdir/$version" "/$ROOT/$basedir"/src
	for i in "$bfdir"/*; do
		if [ -f "$i" ]; then
			case "$i" in
				*~) ;;
				*)
					cp "$i" "/$ROOT/$basedir"/src
					;;
			esac
		fi
	done
}

function preserve_buildfiles {
	_preserve_buildfiles
}


function _syzfile_description {
	# eventually, use the magic detection script thingie, eg.
	# generate_syzfile "$basedir"
	return 1
}

function syzfile_description {
	_syzfile_description
}


function _install_syzfile {
	if [ ! -e "/$ROOT/$basedir"/syzfile ]; then
		{
			echo "#%Module"
			echo "description {"
			{
				if [ "${#runtime_deps[@]}" -gt 0 ]; then
					echo "# Start runtime_deps"
					local i
					for i in "${runtime_deps[@]}"; do
						echo "soft-prereq $i"
					done
					echo "# End runtime_deps"
				fi
				syzfile_description
			} | awk '{printf("\t%s\n",$0)}'
			echo "}"
		} > "/$ROOT/$basedir"/syzfile
	fi
}

function install_syzfile {
	_install_syzfile
}


# Just use rm -rf you wimp
#function purge {
#	if [ $# -eq 0 ]; then
#		echo "bf: build: specify a package name"
#		return 1
#	fi
#
#	pkgname="$1"
#	shift
#
#	echo "NOT YET IMPLEMENTED"
#}


function _versionbuild {
	versionbuild="$version${build:+-$build}"
}

function versionbuild {
	_versionbuild
}

function _basedir {
	versionbuild
	#basedir="$BASE_SW/$repo/$arch/$pkgname/$versionbuild"
	#basedir="$repo/$arch/$pkgname/$versionbuild"
	#basedir="$ROOT/$prefix/$repo/$arch/$pkgname/$versionbuild"
	#basedir="/$prefix/$repo/$arch/$pkgname/$versionbuild"
	basedir="/$repo/$arch/$pkgname/$versionbuild"
	# FIXME: remove consecutive //// slashes
	basedir="${basedir//+(\/)//}"
}

function basedir {
	_basedir
}

function _basedir_relative {
	versionbuild
	basedir_relative="../../$pkgname/$versionbuild"
	basedir_relative="${basedir_relative//+(\/)//}"
}

function basedir_relative {
	_basedir_relative
}

function _sffile {
	versionbuild
	#sffile="$repo/$arch/.sf/$pkgname/$versionbuild"
	#sffile="$ROOT/$prefix/$repo/$arch/.sf/$pkgname/$versionbuild"
	# Hmmm...
	#sffile="$ROOT/$prefix/$repo/$arch/.sf/$pkgname/$versionbuild"
	#sffile="$ROOT/$repo/$arch/.sf/$pkgname/$versionbuild"
	sffile="/$repo/$arch/.sf/$pkgname/$versionbuild"
	# FIXME: remove consecutive //// slashes
	sffile="${sffile//+(\/)//}"
}

function sffile {
	_sffile
}

function _archive_dir {
	archive_dir="$bfdir/$version"
}

function archive_dir {
	_archive_dir
}

function _CFLAGS {
	# FIXME: don't blindly += when CFLAGS might already have -O2, etc in it.
	# By the same token, don't kill what the user might already have put in CFLAGS.
	# This is really a job for modules... hehehe.
	if [ "$ARCH" = "i486" ]; then
	  CFLAGS+=" -O2 -march=i486 -mtune=i686"
	elif [ "$ARCH" = "i686" ]; then
	  CFLAGS+=" -O2 -march=i686 -mtune=i686"
	elif [ "$ARCH" = "x86_64" ]; then
	  CFLAGS+=" -O2 -fPIC"
	else
	  CFLAGS+=" -O2"
	fi
	export CFLAGS
}

function CFLAGS {
	_CFLAGS
}

function _CXXFLAGS {
	# FIXME: don't blindly += when CFLAGS might already have -O2, etc in it.
	# By the same token, don't kill what the user might already have put in CFLAGS.
	# This is really a job for modules... hehehe.
	if [ "$ARCH" = "i486" ]; then
	  CXXFLAGS+=" -O2 -march=i486 -mtune=i686"
	elif [ "$ARCH" = "i686" ]; then
	  CXXFLAGS+=" -O2 -march=i686 -mtune=i686"
	elif [ "$ARCH" = "x86_64" ]; then
	  CXXFLAGS+=" -O2 -fPIC"
	else
	  CXXFLAGS+=" -O2"
	fi
	export CXXFLAGS
}

function CXXFLAGS {
	_CXXFLAGS
}

function _LDFLAGS {
	LDFLAGS="${LDFLAGS-}"
	export LDFLAGS
}

function LDFLAGS {
	_LDFLAGS
}

function _default_build {
	# The detected build depends on any pre-existing installations
	# of the package with the same version and arch (in this repo).
	# Now that we know all of those details, if we need to, get a
	# detected build number and (maybe/probably) use it.

	# FIXME: make this not add the "-1" if this is the first build.
	# and similarly, for the second build, use "-2" even though there is no "-1" dir...

	orig_basedir="$basedir"
	build="" basedir
	local -a existing_builds
	local i
	for i in "/$ROOT/$basedir"*; do
		i="${i#/$ROOT/$basedir}"
		case "$i" in
			# keep only "-43563451" or ""
			# others might be other (unrelated) versions,
			# eg. if version is "1.3" then i="2" would be for a different version "1.32",
			# or i=".2" would be for "1.3.2"
			-*([0-9])) existing_builds+=("${i#-}") ;;
			"") existing_builds+=("1") ;;
		esac
	done
	#declare -p existing_builds
	readarray -t existing_builds < <(for i in "${existing_builds[@]}"; do echo "$i"; done | sort -n)
	#declare -p existing_builds
	i=1
	while [ "$i" -le "${#existing_builds[@]}" ] && [ "${existing_builds[$(($i - 1))]}" -eq "$i" ]; do
		# Already exists.
		# However, if it is there but substantially empty (nothing inside or
		# only a src directory), then "reuse" this "failed" build.
		local thisbasedir="$basedir"
		if [ "$i" -gt 1 ]; then
			thisbasedir+="-$i"
		fi
		case "$(echo "$thisbasedir"/*)" in
			"")
				# truly empty
				break ;;
			"$thisbasedir/src")
				# only src subdir
				break ;;
		esac
		#echo "${existing_builds[$(($i - 1))]}" -ne "$i"
		i="$(($i + 1))"
	done
	if [ "$i" -eq 1 ]; then
		detect_build=""
	else
		detect_build="$i"
	fi
	default_build="$detect_build"
	basedir="$orig_basedir"
}

function default_build {
	_default_build
}

function countargs {
	echo "$#"
}

function do_build {

	echo ""
	info "Started: $(date): bf build $*"

	pkgname=""
	version=""
	build_args=()
	force=n
	verbose=n
	fetch=n
	help=n
	makedefault=n
	dryrun=n
	full_bf_build_args=()

	for i; do
		full_bf_build_args+=($i)
		case "$i" in
			--force)
				force=y
				;;
			--verbose)
				verbose=y
				;;
			--fetch)
				fetch=y
				;;
			-n|--dryrun|--dry-run)
				dryrun=y
				;;
			--makedefault|--make-default)
				makedefault=y
				;;
			--help)
				help=y
				;;
			*=*)
				n="${i%%=*}"
				#if [ x"$n" = x"${n^^}" ]; then
				#	prefix=""
				#	#eval "$n="'${i#$n=}'
				#else
				#	prefix="override_"
				#	#eval "override_$n="'${i#$n=}'
				#fi
				##eval "override_$n="'${i#$n=}'
				#eval "$prefix$n="'${i#$n=}'
				extrainfo+=" $i"
				eval "$n="'${i#$n=}'
				;;
			*)
				if [ x"$pkgname" = x"" ]; then
					pkgname="$i"
				elif [ x"$version" = x"" ]; then
					extrainfo+=" $i"
					version="$i"
				else
					extrainfo+=" $i"
					build_args+=("$i")
				fi
				;;
		esac
	done

	if [ x"$help" = x"y" ]; then
		echo "Usage: bf build [options] <pkgname> [[version=]<version>] [var=value [...]] [build args...]"
		echo ""
		echo "Options:"
		echo "  --help"
		echo "  --force"
		echo "  --verbose"
		echo "  --fetch"
		echo "  --make-default"
		echo ""
		echo "Variables:"
		echo "  version=<version>"
		echo "  arch=<arch>"
		echo "  build=<build>"
		echo "  repo=<repo>"
		#echo "  prefix=<prefix>"
		echo ""
		echo "  CFLAGS=<CFLAGS>"
		echo "  CXXFLAGS=<CXXFLAGS>"
		echo "  LDFLAGS=<LDFLAGS>"
		echo "  ROOT=<ROOT>"
		#echo "  SW=<SW>"
		echo ""
		return 0
	fi

	if [ x"$pkgname" = x"" ]; then
		error 1 "Specify a package name"
	fi

	. syzlib || error 1 "unable to source syzlib"

	#ROOT="${ROOT:-/}"

	#SW="${SW:-sw}"

	#for i in sw bf mf; do
	#	n="BASE_${i^^}"
	#	eval "$n=\"${!n:-$ROOT/$i}\""
	#	while [ x"${!n}" != x"${!n//\/\///}" ]; do
	#		eval "$n=\"${!n//\/\///}\""
	#	done
	#	eval "$n=\"${!n/%\/}\""
	#done

	#for i in ROOT BASE_SW BASE_BF BASE_MF; do
	#	echo "$i=${!i}"
	#done
	#echo ""


	## FIXME: make this an overridable function
	## FIXME: make this be obtained from the environment, if it's there
	#default_repo_bases=()
	#default_repo_bases+=(syzix)
	## FIXME: eventually, split the "syzix" repo into a few main repos...
	##default_repo_bases+=(syzix/base)
	##default_repo_bases+=(syzix/testing)
	##default_repo_bases+=(syzix/unfree)
	##default_repo_bases+=(syzix/extra)

	#SHORT_HOSTNAME="${SHORT_HOSTNAME:-${HOSTNAME%%.*}}"

	## FIXME: make this be obtained from the environment, if it's there
	#default_repos=()
	#for i in "${default_repo_bases[@]}"; do
	#	default_repos+=("/$HOME/$SW/host/$SHORT_HOSTNAME/$i")
	#	default_repos+=("/$HOME/$SW/$i")
	#	default_repos+=("/$SW/host/$SHORT_HOSTNAME/$i")
	#	default_repos+=("/$SW/$i")
	#done
	#for i in "${default_repos[@]}"; do
	#	default_repos+=("$i"/hostdep)
	#done

	# FIXME: make this an overridable function
	# FIXME: noarch should come first, followed by $(uname -m), followed by the rest
	# FIXME: use $default_repos
	#default_bfpath=(/syzix/*/.sf)   # wtf was i thinking??
	#default_bfpath=(/syzix/bf)
	#default_bfpath=(/syzix/bf /syzix-host/bf)
	#default_bfpath=(/"$prefix"/syzix/bf /"$prefix"/syzix-host/bf)
	#default_bfpath=(/$SW/syzix/src /$SW/syzix-host/src)
	default_bfpath=()
	for i in "${syzix_repos[@]}"; do
		default_bfpath+=("$i"/src)
	done
	default_bfpath=("${default_bfpath[@]//+(\/)//}")

	old_IFS="$IFS"
	IFS=":"
	bfpath=($BF_PATH${BF_PATH:+${BFPATH:+:}}$BFPATH)
	IFS="$old_IFS"
	#extra_bfpath="${repo:+/$prefix/$repo/bf}"
	#extra_bfpath="${repo:+/$repo/src}"
	extra_bfpath="${repo:+/$repo/src}"
	extra_bfpath="${extra_bfpath//+(\/)//}"

	info "$(declare -p extra_bfpath)"
	info "$(declare -p bfpath)"
	info "$(declare -p default_bfpath)"

	# If $repo is set here, then it is because the user has specified it on the cmdline.
	# So preferentially find any bffile in that repo first.
	for j in "$extra_bfpath" "${bfpath[@]}" "${default_bfpath[@]}"; do
		# FIXME: if the user has specified a version=, and there is a Buildifile inside $j/$pkgname/$version, then use that instead
		if [ -d "$j/$pkgname" -a -r "$j/$pkgname" -a -f "$j/$pkgname/Buildifile" -a -r "$j/$pkgname/Buildifile" ]; then
			bfdir="$j/$pkgname"
			bffile="$bfdir/Buildifile"
			# FIXME: maybe just strip off the final dirname, no matter what it's called?
			detect_repo="${j}"
			detect_repo="${detect_repo%/}"
			detect_repo="${detect_repo%/src}"
			detect_repo="${detect_repo#/}"
			detect_repo="${detect_repo#$ROOT}"
			detect_repo="${detect_repo//+(\/)//}"
			detect_repo="/${detect_repo}"
			#detect_repo="${detect_repo#$prefix}"
			#detect_repo="${detect_repo#/}"
			break
		fi
	done
	if [ x"$bfdir" = x"" ]; then
		# FIXME: try to download the bf/$pkgname dir from a syzix.org mirror
		error 1 "Unable to find bf location for $pkgname"
	fi

	echo ""
	info "$(declare -p bffile)"
	info "$(declare -p bfdir)"
	info "$(declare -p detect_repo)"
	echo ""

	# FIXME: ${BF_BASE:-}/etc/bfrc, not /etc/bfrc.  Eat your own dogfood.
	#if [ -r "/etc/bfrc" ]; then
	#	SYSTEM_WIDE=y . "/etc/bfrc"
	#fi

	. "$bffile"


	#for i in version arch repo build; do
	#	setup_var "$i"
	#done
	default_version
	version="${version:-$default_version}"
	default_arch
	arch="${arch:-$default_arch}"
	default_repo
	repo="${repo:-$default_repo}"
	#default_prefix
	#prefix="${prefix:-$default_prefix}"
	default_build
	build="${build:-$default_build}"


	#############
	# AT THIS POINT, $pkgname, $version, $arch, $repo ARE SET
	#############

	#basedir="$BASE_SW/$repo/$arch/$pkgname/$version-$build"
	basedir

	for i in pkgname version arch repo build basedir; do
		#echo "$i=${!i}"
		info "$(declare -p "$i")"
	done
	echo ""

	if ! supported_version; then
		error 1 "version $version is not supported"
	fi

	#for i in "${possible_vars[@]}"; do
	for i in default_{{,{,un}stable_}version,arch,repo,build} version_separator source_location source_checksum archive_name archive_dir source_dir configure_args fetcher {C{,XX},LD}FLAGS; do
		"$i"
		#j="$i[@]"
		#echo "$i=${!j}"
		info "$(declare -p "$i")"
	done
	echo ""

	if [ -e "/$ROOT/$basedir" -a ! -d "/$ROOT/$basedir" ]; then
		force_required=y
	elif [ -e "/$ROOT/$basedir" ]; then
		# if it's empty, then no force_required.
		# if it has just one thing in it called src, then no force required.
		# if it has just one thing in it (something else), then force required.
		# if it has	more than one thing in it, then force required.
		local numsubdirs="$(countargs "/$ROOT/$basedir"/{*,.??*,.[^.]})"
		if [ "$numsubdirs" -eq 0 ]; then
			force_required=n
		elif [ "$numsubdirs" -eq 1 ]; then
			if [ "/$ROOT/$basedir"/{*,.??*,.[^.]} = "/$ROOT/$basedir"/src ]; then
				force_required=n
			else
				force_required=y
			fi
		else
			force_required=y
		fi
	fi

	if [ x"$force_required" = xy ]; then
		if [ x"$force" != xy ]; then
			error 1 "$basedir exists and contains more than just src" \
			        "--force is required to enable the implicit rm -rf $basedir"
		fi
	fi


	# Check dependencies
	build_deps
	runtime_deps
	info "$(declare -p build_deps)"
	info "$(declare -p runtime_deps)"
	failed_deps=()
	for i in "${build_deps[@]}" "${runtime_deps[@]}"; do
		info "Resolving dependency $i... build"
		# FIXME: use "syz ensure" instead of "syz load"
		#if syz ensure "$i"; then
		if syz load "$i"; then    # ensure doesn't exist yet, just use load for now...
			echo "done"
		else
			echo "unable to load, attempting to build instead"
			bf_build_args=()
			for j in verbose fetch dryrun makedefault; do
				if [ x"${!j}" = x"y" ]; then
					bf_build_args+=( --"$j" )
				fi
			done
			info "Running: BUILDIFUL_LOGFILE= $cmdname build ${bf_build_args[@]} $i"
			if ! BUILDIFUL_LOGFILE= $cmdname build "${bf_build_args[@]}" "$i"; then
				info "Unable to build $i"
				info "Unable to satisfy dependency: $i"
				case "$repo" in
					*/hostdep)
						# When building something in a */hostdep repo, failing to load/build one of its dependencys
						# is not fatal - plough onwards in the hope that the build will work anyway, by falling
						# back to the 'host' software - hence "hostdep"
						info "Already in a hostdep repo ($repo)"
						warning "Ignoring failed dependency \"$i\" in $repo repo"
						# If this is a runtime_dep, then remove it from the runtime_deps list.
						# Otherwise it will end up being automatically put in the syzfile, which for */hostdep builds, is not what's wanted.
						failed_deps+=("$i")
						;;
					*)
						info "Trying to build $pkgname in the $repo/hostdep repo instead"
						info "Running: BUILDIFUL_LOGFILE= $cmdname build ${full_bf_build_args[@]} repo=$repo/hostdep"
						# this should be told not to log into the main bf.log logfile,
						# because if it does, then there will be 2 copies of every line... (!!)
						# is this the case for *every* sub-invocation of bf (ie. the other place where it's run above)?  yes, i think so...
						if BUILDIFUL_LOGFILE= $cmdname build "${full_bf_build_args[@]}" repo="$repo"/hostdep; then
							info "Success building in the $repo/hostdep repo"
							return 0
						else
							rc=$?
							error $rc "Unable to build \"$i\" in the $repo/hostdep repo" \
							          "Unable to build, aborting"
						fi
						;;
				esac
			fi
		fi
	done
	# FIXME: anything in failed_deps that is from runtime_deps should get removed from runtime_deps
	case "$repo" in
		*/hostdep)
			info "hostdep: Dropping failed runtime deps: ${failed_deps[@]}"
			info "$(declare -p failed_deps)"
			# FIXME: use associative arrays so as to drop this n^2 searching rubbish
			new_runtime_deps=()
			for i in "${runtime_deps[@]}"; do
				local found=n
				for j in "${failed_deps[@]}"; do
					if [ x"$i" = x"$j" ]; then
						found=y
						break
					fi
				done
				if [ x"$found" != x"y" ]; then
					new_runtime_deps+=("$i")
				fi
			done
			unset found
			runtime_deps=("${new_runtime_deps[@]}")
			info "$(declare -p runtime_deps)"
			;;
	esac
	info "All dependencies satisfied"


	if [ x"$dryrun" = x"y" ]; then
		info "dry-run, skipping building $pkgname/$versionbuild"
		return 0
	fi



	rm -rf "/$ROOT/$basedir" || fail
	mkdir -p "/$ROOT/$basedir"/src || fail

	log_both "/$ROOT/$basedir"/src/bf.log actual_do_build "$@"

	# FIXME: packagify

	info "Finished: $(date): bf build $*"
	echo ""
}

function actual_do_build {

	# FIXME: start logging from here

	archive_name
	if [ x"$archive_name" != x"" ]; then
		archive_dir
		mkdir -p "$archive_dir" || fail
		cd "$archive_dir" || fail
		if ! verify; then
			fetch || fail
		fi
		verify || fail
	fi

	if [ x"$archive_name" != x"" ]; then
		cd "/$ROOT/$basedir"/src || fail
		unpack || fail
	else
		cd "$bfdir" || fail
	fi

	# cd
	source_dir
	if [ x"$source_dir" != x"" ]; then
		cd "$source_dir" || fail
	fi

	# build and install
	build || fail

	# install $basedir/modulefile
	install_syzfile || fail

	# FIXME: be careful with $ROOT
	# make symlink from /mf to $basedir/modulefile
	if [ -e "/$ROOT/$basedir"/syzfile ]; then
		sffile
		mkdir -p "/$ROOT/${sffile%/*}" || fail
		basedir_relative
		ln -sf "$basedir_relative"/syzfile "/$ROOT/$sffile" || fail
	fi

	# FIXME: be careful with $ROOT
	# if no other versions present, make this the default
	local numsubdirs="$(countargs "/$ROOT/${basedir%/*}"/*)"
	if [ x"$makedefault" = xy -o "$numsubdirs" -eq 1 ]; then
		if [ -L default ]; then
			rm -f default
		fi
		cd "/$ROOT/${basedir%/*}"
		ln -s "${basedir##*/}" default
		versionbuild
		cat <<-EOF > "/$ROOT/${sffile%/*}/.version"
		#%Module1.0
		set ModulesVersion "$versionbuild"
		EOF
	fi

	# keep a copy of the Buildifile (and stuff) in $basedir/src
	preserve_buildfiles || fail


	# FIXME: end logging here
}



function doit {
	subcmd="$1"
	shift
	do_"$subcmd" "$@"
}

case "$1" in
	build)
		# FIXME: I want the stdout and stderr to be preserved (ie. to still go to stdout/err), but also
		# to be mixed together and put into the logfile.
		# The logfile is "${BUILDIFUL_LOGFILE-${BUILDIFUL_BASE:-/sw/syzix/noarch/buildiful/default}/var/log/bf.log}".
		log_both "${BUILDIFUL_LOGFILE-${BUILDIFUL_BASE:-/sw/syzix/noarch/buildiful/default}/var/log/bf.log}" doit "$@" ;;
	#purge)
	#	"$@" ;;
	*)
		doit build --help
		;;
esac

